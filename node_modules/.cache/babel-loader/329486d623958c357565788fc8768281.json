{"ast":null,"code":"import { config } from '../Config/config';\n\nconst BigNumber = require('bignumber.js');\n\nconst precisions = config.environment.Precisions;\nconst formatLocalMap = {\n  es: {\n    decimalSeparator: ',',\n    groupSeparator: '.'\n  },\n  en: {\n    decimalSeparator: '.',\n    groupSeparator: ','\n  }\n};\nconst formatLocalMap2 = {\n  es: 'es',\n  en: 'en'\n}; // default format\n\nBigNumber.config({\n  FORMAT: formatLocalMap.en\n});\nconst formatMap = {\n  RISKPROX: precisions.RBTCPrecision,\n  RISKPRO: precisions.RBTCPrecision,\n  STABLE: precisions.USDPrecision,\n  USD: precisions.USDPrecision,\n  USDPrice: precisions.PriceUSDPrecision,\n  RESERVE: precisions.RBTCPrecision,\n  MOC: precisions.mocPrecision,\n  REWARD: precisions.REWARDPrecision,\n  COV: precisions.COVPrecision,\n  LEV: precisions.COVPrecision,\n  percentage: precisions.percentagePrecision,\n  visiblePercentage: precisions.visiblePercentage,\n  RISKPROXInterest: precisions.RISKPROXInterest,\n  FreeDocInterest: precisions.FreeDocInterest,\n  commissionRate: precisions.commissionRate,\n  valueVariation: precisions.valueVariation\n};\n\nconst precision = _ref => {\n  let {\n    contractDecimals\n  } = _ref;\n  return new BigNumber(10).exponentiatedBy(contractDecimals);\n};\n\nconst formatValue = (amount, currencyCode, format, decimals) => {\n  const fd = formatMap[currencyCode];\n  return formatValueFromMap(amount, fd, format, decimals);\n};\n\nconst formatValueFromMap = (amount, mapEntry, format, decimals) => {\n  return BigNumber(amount).div(precision(mapEntry)).toFormat(decimals || mapEntry.decimals, BigNumber.ROUND_DOWN, format);\n};\n\nconst adjustPrecision = (amount, currencyCode) => {\n  const fd = formatMap[currencyCode];\n  return fd ? {\n    value: new BigNumber(amount).div(precision(fd)),\n    decimals: fd.decimals\n  } : {\n    value: new BigNumber(amount),\n    decimals: 2\n  };\n};\n\nconst formatVisibleValue = (amount, currencyCode, language, decimals) => {\n  if (amount === null || amount === undefined) return '-';\n  const num = formatValue(amount, currencyCode, formatLocalMap[language], decimals);\n  return num;\n};\n\nconst formatValueVariation = (amount, language) => {\n  if (!amount) return '-';\n  const fd = formatMap['valueVariation'];\n  const num = formatValueFromMap(amount, fd, formatLocalMap[language]);\n  return num;\n};\n\nconst formatDecimalRatioAsPercent = amount => Number.isNaN(amount) ? 0 : amount * 100;\n\nconst formatValueWithContractPrecision = (amount, currencyCode) => {\n  BigNumber.config({\n    ROUNDING_MODE: BigNumber.ROUND_DOWN\n  });\n  const fd = formatMap[currencyCode];\n  return BigNumber(amount).div(precision(fd)).toFormat(fd.contractDecimals, BigNumber.ROUND_DOWN);\n};\n\nconst formatValueToContract = (amount, currencyCode) => {\n  return new BigNumber(amount).multipliedBy(precision(formatMap[currencyCode])).toFixed(0);\n};\n\nconst formatPerc = (value, language) => Number.isNaN(value) ? '-' : parseFloat(Math.round(value * 100) / 100).toLocaleString(language, {\n  minimumFractionDigits: 2,\n  maximumFractionDigits: 2\n});\n\nexport { formatValue, formatVisibleValue, formatValueVariation, formatValueToContract, formatValueWithContractPrecision, formatPerc, formatDecimalRatioAsPercent, adjustPrecision, precision, formatLocalMap, formatLocalMap2 };","map":{"version":3,"names":["config","BigNumber","require","precisions","environment","Precisions","formatLocalMap","es","decimalSeparator","groupSeparator","en","formatLocalMap2","FORMAT","formatMap","RISKPROX","RBTCPrecision","RISKPRO","STABLE","USDPrecision","USD","USDPrice","PriceUSDPrecision","RESERVE","MOC","mocPrecision","REWARD","REWARDPrecision","COV","COVPrecision","LEV","percentage","percentagePrecision","visiblePercentage","RISKPROXInterest","FreeDocInterest","commissionRate","valueVariation","precision","contractDecimals","exponentiatedBy","formatValue","amount","currencyCode","format","decimals","fd","formatValueFromMap","mapEntry","div","toFormat","ROUND_DOWN","adjustPrecision","value","formatVisibleValue","language","undefined","num","formatValueVariation","formatDecimalRatioAsPercent","Number","isNaN","formatValueWithContractPrecision","ROUNDING_MODE","formatValueToContract","multipliedBy","toFixed","formatPerc","parseFloat","Math","round","toLocaleString","minimumFractionDigits","maximumFractionDigits"],"sources":["C:/Users/micae/OneDrive/Documentos/CoinFabrik/stable-protocol-interface/src/Lib/Formats.js"],"sourcesContent":["import { config } from '../Config/config';\r\nconst BigNumber = require('bignumber.js');\r\nconst precisions = config.environment.Precisions;\r\n\r\nconst formatLocalMap = {\r\n    es: {\r\n        decimalSeparator: ',',\r\n        groupSeparator: '.'\r\n    },\r\n    en: {\r\n        decimalSeparator: '.',\r\n        groupSeparator: ','\r\n    }\r\n};\r\n\r\nconst formatLocalMap2 = {\r\n    es: 'es',\r\n    en: 'en'\r\n};\r\n\r\n// default format\r\nBigNumber.config({\r\n    FORMAT: formatLocalMap.en\r\n});\r\n\r\nconst formatMap = {\r\n    RISKPROX: precisions.RBTCPrecision,\r\n    RISKPRO: precisions.RBTCPrecision,\r\n    STABLE: precisions.USDPrecision,\r\n    USD: precisions.USDPrecision,\r\n    USDPrice: precisions.PriceUSDPrecision,\r\n    RESERVE: precisions.RBTCPrecision,\r\n    MOC: precisions.mocPrecision,\r\n    REWARD: precisions.REWARDPrecision,\r\n    COV: precisions.COVPrecision,\r\n    LEV: precisions.COVPrecision,\r\n    percentage: precisions.percentagePrecision,\r\n    visiblePercentage: precisions.visiblePercentage,\r\n    RISKPROXInterest: precisions.RISKPROXInterest,\r\n    FreeDocInterest: precisions.FreeDocInterest,\r\n    commissionRate: precisions.commissionRate,\r\n    valueVariation: precisions.valueVariation\r\n};\r\n\r\nconst precision = ({ contractDecimals }) =>\r\n    new BigNumber(10).exponentiatedBy(contractDecimals);\r\n\r\nconst formatValue = (amount, currencyCode, format, decimals) => {\r\n    const fd = formatMap[currencyCode];\r\n    return formatValueFromMap(amount, fd, format, decimals);\r\n};\r\n\r\nconst formatValueFromMap = (amount, mapEntry, format, decimals) => {\r\n    return BigNumber(amount)\r\n        .div(precision(mapEntry))\r\n        .toFormat(decimals || mapEntry.decimals, BigNumber.ROUND_DOWN, format);\r\n};\r\n\r\nconst adjustPrecision = (amount, currencyCode) => {\r\n    const fd = formatMap[currencyCode];\r\n    return fd\r\n        ? {\r\n              value: new BigNumber(amount).div(precision(fd)),\r\n              decimals: fd.decimals\r\n          }\r\n        : { value: new BigNumber(amount), decimals: 2 };\r\n};\r\n\r\nconst formatVisibleValue = (amount, currencyCode, language, decimals) => {\r\n    if (amount === null || amount === undefined) return '-';\r\n    const num = formatValue(\r\n        amount,\r\n        currencyCode,\r\n        formatLocalMap[language],\r\n        decimals\r\n    );\r\n    return num;\r\n};\r\n\r\nconst formatValueVariation = (amount, language) => {\r\n    if (!amount) return '-';\r\n    const fd = formatMap['valueVariation'];\r\n    const num = formatValueFromMap(amount, fd, formatLocalMap[language]);\r\n    return num;\r\n};\r\n\r\nconst formatDecimalRatioAsPercent = (amount) =>\r\n    Number.isNaN(amount) ? 0 : amount * 100;\r\n\r\nconst formatValueWithContractPrecision = (amount, currencyCode) => {\r\n    BigNumber.config({ ROUNDING_MODE: BigNumber.ROUND_DOWN });\r\n    const fd = formatMap[currencyCode];\r\n    return BigNumber(amount)\r\n        .div(precision(fd))\r\n        .toFormat(fd.contractDecimals, BigNumber.ROUND_DOWN);\r\n};\r\n\r\nconst formatValueToContract = (amount, currencyCode) => {\r\n    return new BigNumber(amount)\r\n        .multipliedBy(precision(formatMap[currencyCode]))\r\n        .toFixed(0);\r\n};\r\nconst formatPerc = (value, language) =>\r\n    Number.isNaN(value)\r\n        ? '-'\r\n        : parseFloat(Math.round(value * 100) / 100).toLocaleString(language, {\r\n              minimumFractionDigits: 2,\r\n              maximumFractionDigits: 2\r\n          });\r\n\r\nexport {\r\n    formatValue,\r\n    formatVisibleValue,\r\n    formatValueVariation,\r\n    formatValueToContract,\r\n    formatValueWithContractPrecision,\r\n    formatPerc,\r\n    formatDecimalRatioAsPercent,\r\n    adjustPrecision,\r\n    precision,\r\n    formatLocalMap,\r\n    formatLocalMap2\r\n};\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}