{"ast":null,"code":"import { formatValueWithContractPrecision, formatValueToContract, precision } from './Formats';\nimport { toBigNumber, minimum } from './numberHelper';\nimport { getTransactionType } from './exchangeHelper';\nimport { config } from '../Config/config';\n\nconst BigNumber = require('bignumber.js');\n\nconst RBTCPrecision = config.environment.Precisions.RBTCPrecision;\n\nconst convertAmount2222 = (source, target, amount, convertToken) => {\n  console.log(source, target, amount);\n\n  if (amount === '') {\n    return '';\n  } // if (TAPi18n.getLanguage() === 'es') {\n  //   amount = amount.toLocaleString(TAPi18n.getLanguage());\n  // }\n  // const convertedAmount = formatValueWithContractPrecision(\n  //   convertToken(source, target, formatValueToContract(amount, source)),\n  //   target\n  // );\n\n\n  console.log('wwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwww11111111111111111111111111');\n  console.log(convertToken(source, target, formatValueToContract(amount, source)));\n  console.log('wwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwww11111111111111111111111111');\n  const convertedAmount = formatValueWithContractPrecision(convertToken(source, target, formatValueToContract(amount, source)), target);\n  console.log('convertedAmount', convertedAmount);\n  const replacedDot = convertedAmount.replace(/\\./g, '');\n  console.log('replacedDot', replacedDot.replace(/\\./g, ''));\n  const replacedComma = replacedDot.replace(/,/g, '');\n  console.log('replacedComma', replacedComma);\n  console.log(isNaN(replacedComma));\n  return isNaN(replacedComma) ? '' : replacedComma.toString(); // console.log(isNaN(convertAmount));\n  // return isNaN(convertedAmount) ? '' : convertedAmount.toString();\n  // return isNaN(convertedAmount) ? '' : convertedAmount.toString();\n};\n\nconst convertAmount = (source, target, amount, convertToken) => {\n  if (amount === '') {\n    return '';\n  } // if (TAPi18n.getLanguage() === 'es') {\n  //   amount = amount.toLocaleString(TAPi18n.getLanguage());\n  // }\n\n\n  const convertedAmount = formatValueWithContractPrecision(convertToken(source, target, formatValueToContract(amount, source)), target);\n  return convertedAmount === \"NaN\" ? '' : convertedAmount.toString();\n};\n\nconst amountIsTooSmall = target => {\n  const minorValue = BigNumber('0.0000000000000000001');\n  return minorValue.gt(toBigNumber(target));\n};\n\nconst calcCommissionValue = (rbtcBalance, commissionRate) => rbtcBalance * (commissionRate / precision(RBTCPrecision));\n\nconst getUsableReserveBalance = (currencyToMint, userState, mocState, convertToken) => {\n  const {\n    rbtcBalance = 0,\n    spendableBalance = 0,\n    potentialBprox2MaxInterest = 0\n  } = userState || {};\n  const commission = getCommissionRateForMintingTotalAvailable(currencyToMint, mocState, userState, convertToken);\n  const gasEstimation = gasMintingEstimation(currencyToMint, userState);\n  const reserveCommisionValue = calcCommissionValue(rbtcBalance, commission.commissionRate);\n  const spendableBalanceBn = toBigNumber(rbtcBalance);\n  const mintingGasEstimation = gasEstimation !== undefined ? gasEstimation : 0;\n  let available = spendableBalanceBn.minus(reserveCommisionValue).minus(mintingGasEstimation);\n\n  if (currencyToMint === 'RISKPROX') {\n    available.minus(potentialBprox2MaxInterest);\n  }\n\n  return BigNumber.maximum(0, available);\n};\n\nconst gasMintingEstimation = (currencyToMint, userState) => {\n  const {\n    estimateGasMintDoc = 0,\n    estimateGasMintBpro = 0,\n    estimateGasMintBprox2 = 0\n  } = userState || {};\n\n  switch (currencyToMint) {\n    case 'STABLE':\n      return estimateGasMintDoc;\n\n    case 'RISKPRO':\n      return estimateGasMintBpro;\n\n    case 'RISKPROX':\n      return estimateGasMintBprox2;\n\n    default:\n      return undefined;\n  }\n};\n\nconst getCommissionRateForMintingTotalAvailable = (tokenToMint, mocState, userState, convertToken) => {\n  const {\n    spendableBalance = '0',\n    rbtcBalance = '0'\n  } = userState || {};\n  return getCommissionRateAndCurrency({\n    currencyYouExchange: \"RESERVE\",\n    currencyYouReceive: tokenToMint,\n    valueYouExchange: rbtcBalance,\n    mocState,\n    userState,\n    convertToken\n  });\n};\n\nconst canPayCommissionInMoc = (commissionValue, userState) => {\n  return enoughMOCBalance(commissionValue, userState) && enoughMOCAllowance(commissionValue, userState);\n};\n\nconst enoughMOCAllowance = (commissionValue, userState) => {\n  const {\n    mocAllowance = '0'\n  } = userState || {};\n  return BigNumber(mocAllowance).gt(0) && BigNumber(mocAllowance).gte(commissionValue);\n};\n\nconst enoughMOCBalance = (commissionValue, userState) => {\n  const {\n    mocBalance\n  } = userState || {};\n  return BigNumber(mocBalance).gte(commissionValue);\n};\n\nconst getCommissionRateAndCurrency = _ref => {\n  let {\n    currencyYouExchange,\n    currencyYouReceive,\n    valueYouExchange,\n    mocState,\n    userState,\n    convertToken\n  } = _ref;\n  const {\n    commissionRates = {}\n  } = mocState || {};\n  if (!convertToken) return {}; // const vendor = { address: \"0xf69287F5Ca3cC3C6d3981f2412109110cB8af076\", markup: \"500000000000000\" };\n\n  const vendor = config.vendor;\n  const valueYouExchangeInRESERVE = convertToken(currencyYouExchange, \"RESERVE\", valueYouExchange);\n  const valueYouExchangeInMOC = convertToken(\"RESERVE\", \"MOC\", valueYouExchangeInRESERVE);\n  const commissionRateForMOC = BigNumber(commissionRates[getTransactionType(currencyYouExchange, currencyYouReceive, \"MOC_COMMISSION\")]).plus(vendor.markup);\n  const commissionRateForRESERVE = BigNumber(commissionRates[getTransactionType(currencyYouExchange, currencyYouReceive, \"RESERVE_COMMISSION\")]).plus(vendor.markup);\n  const commissionValueIfPaidInMOC = commissionRateForMOC.times(valueYouExchangeInMOC).div(precision(RBTCPrecision));\n  const canPayInMOC = canPayCommissionInMoc(commissionValueIfPaidInMOC, userState);\n  const commissionValueIfPaidInRESERVE = commissionRateForRESERVE.times(valueYouExchangeInRESERVE).div(precision(RBTCPrecision));\n  const commissionYouPay = canPayInMOC ? commissionValueIfPaidInMOC : commissionValueIfPaidInRESERVE;\n  return {\n    commissionCurrency: canPayInMOC ? \"MOC\" : \"RESERVE\",\n    commissionRate: canPayInMOC ? commissionRateForMOC : commissionRateForRESERVE,\n    commissionYouPay: commissionYouPay,\n    enoughMOCBalance: enoughMOCBalance(commissionValueIfPaidInMOC, userState)\n  };\n};\n\nconst getMaxMintableBalance = (currencyToMint, userState, mocState, convertToken) => {\n  const usableReserveBalance = getUsableReserveBalance(currencyToMint, userState, mocState, convertToken);\n  const {\n    docAvailableToMint,\n    bprox2AvailableToMint\n  } = mocState;\n  const usableReserveBalanceInCurrencyToMint = convertToken(\"RESERVE\", currencyToMint, usableReserveBalance);\n  let response;\n\n  switch (currencyToMint) {\n    case 'STABLE':\n      response = {\n        value: minimum(docAvailableToMint, usableReserveBalanceInCurrencyToMint),\n        currency: \"STABLE\"\n      };\n      break;\n\n    case 'RISKPRO':\n      response = {\n        value: usableReserveBalanceInCurrencyToMint,\n        currency: \"RISKPRO\"\n      };\n      break;\n\n    case 'RISKPROX':\n      response = {\n        value: minimum(bprox2AvailableToMint, usableReserveBalanceInCurrencyToMint),\n        currency: \"RISKPROX\"\n      };\n      break;\n\n    default:\n      response = undefined;\n      break;\n  }\n\n  return response;\n};\n\nconst getMaxRedeemableBalance = (currencyToRedeem, userState, mocState) => {\n  const {\n    bproBalance = 0,\n    bprox2Balance = 0,\n    docBalance = 0\n  } = userState || {};\n  const {\n    docAvailableToRedeem,\n    bproAvailableToRedeem\n  } = mocState;\n  let response;\n\n  switch (currencyToRedeem) {\n    case 'STABLE':\n      response = {\n        value: minimum(docAvailableToRedeem, docBalance),\n        currency: \"STABLE\"\n      };\n      break;\n\n    case 'RISKPRO':\n      response = {\n        value: minimum(bproAvailableToRedeem, bproBalance),\n        currency: \"RISKPRO\"\n      };\n      break;\n\n    case 'RISKPROX':\n      response = {\n        value: bprox2Balance,\n        currency: \"RISKPROX\"\n      };\n      break;\n\n    default:\n      response = undefined;\n      break;\n  }\n\n  return response;\n};\n\nconst isAmountBiggerThanMax = (amount, currency, maxAvailable) => {\n  const bdInputAmount = toBigNumber(formatValueToContract(amount, currency));\n  return !bdInputAmount.isNaN() && bdInputAmount.isGreaterThan(maxAvailable);\n};\n\nconst isAmountZero = amount => amount.eq(BigNumber('0'));\n\nexport { convertAmount, isAmountBiggerThanMax, isAmountZero, getMaxMintableBalance, getMaxRedeemableBalance, amountIsTooSmall, getUsableReserveBalance, canPayCommissionInMoc, getCommissionRateAndCurrency };","map":{"version":3,"names":["formatValueWithContractPrecision","formatValueToContract","precision","toBigNumber","minimum","getTransactionType","config","BigNumber","require","RBTCPrecision","environment","Precisions","convertAmount2222","source","target","amount","convertToken","console","log","convertedAmount","replacedDot","replace","replacedComma","isNaN","toString","convertAmount","amountIsTooSmall","minorValue","gt","calcCommissionValue","rbtcBalance","commissionRate","getUsableReserveBalance","currencyToMint","userState","mocState","spendableBalance","potentialBprox2MaxInterest","commission","getCommissionRateForMintingTotalAvailable","gasEstimation","gasMintingEstimation","reserveCommisionValue","spendableBalanceBn","mintingGasEstimation","undefined","available","minus","maximum","estimateGasMintDoc","estimateGasMintBpro","estimateGasMintBprox2","tokenToMint","getCommissionRateAndCurrency","currencyYouExchange","currencyYouReceive","valueYouExchange","canPayCommissionInMoc","commissionValue","enoughMOCBalance","enoughMOCAllowance","mocAllowance","gte","mocBalance","commissionRates","vendor","valueYouExchangeInRESERVE","valueYouExchangeInMOC","commissionRateForMOC","plus","markup","commissionRateForRESERVE","commissionValueIfPaidInMOC","times","div","canPayInMOC","commissionValueIfPaidInRESERVE","commissionYouPay","commissionCurrency","getMaxMintableBalance","usableReserveBalance","docAvailableToMint","bprox2AvailableToMint","usableReserveBalanceInCurrencyToMint","response","value","currency","getMaxRedeemableBalance","currencyToRedeem","bproBalance","bprox2Balance","docBalance","docAvailableToRedeem","bproAvailableToRedeem","isAmountBiggerThanMax","maxAvailable","bdInputAmount","isGreaterThan","isAmountZero","eq"],"sources":["C:/Users/micae/OneDrive/Documentos/CoinFabrik/stable-protocol-interface/src/Lib/exchangeManagerHelper.js"],"sourcesContent":["import {\r\n  formatValueWithContractPrecision,\r\n  formatValueToContract,\r\n  precision,\r\n} from './Formats';\r\nimport { toBigNumber, minimum } from './numberHelper';\r\nimport { getTransactionType } from './exchangeHelper';\r\nimport { config } from '../Config/config';\r\n\r\nconst BigNumber = require('bignumber.js');\r\nconst RBTCPrecision = config.environment.Precisions.RBTCPrecision;\r\n\r\nconst convertAmount2222 = (source, target, amount, convertToken) => {\r\n  console.log(source, target, amount);\r\n  if (amount === '') {\r\n    return '';\r\n  }\r\n  // if (TAPi18n.getLanguage() === 'es') {\r\n  //   amount = amount.toLocaleString(TAPi18n.getLanguage());\r\n  // }\r\n  // const convertedAmount = formatValueWithContractPrecision(\r\n  //   convertToken(source, target, formatValueToContract(amount, source)),\r\n  //   target\r\n  // );\r\n  console.log('wwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwww11111111111111111111111111')\r\n  console.log(convertToken(source, target, formatValueToContract(amount, source)))\r\n  console.log('wwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwww11111111111111111111111111')\r\n  const convertedAmount = formatValueWithContractPrecision(\r\n      convertToken(source, target, formatValueToContract(amount, source)),\r\n      target\r\n  );\r\n  console.log('convertedAmount', convertedAmount);\r\n  const replacedDot = convertedAmount.replace(/\\./g, '');\r\n  console.log('replacedDot', replacedDot.replace(/\\./g, ''))\r\n  const replacedComma = replacedDot.replace(/,/g, '');\r\n  console.log('replacedComma', replacedComma)\r\n  console.log(isNaN(replacedComma))\r\n  return isNaN(replacedComma) ? '' : replacedComma.toString();\r\n  // console.log(isNaN(convertAmount));\r\n  // return isNaN(convertedAmount) ? '' : convertedAmount.toString();\r\n  // return isNaN(convertedAmount) ? '' : convertedAmount.toString();\r\n};\r\n\r\nconst convertAmount = (source, target, amount, convertToken) => {\r\n  if (amount === '') {\r\n    return '';\r\n  }\r\n  // if (TAPi18n.getLanguage() === 'es') {\r\n  //   amount = amount.toLocaleString(TAPi18n.getLanguage());\r\n  // }\r\n  const convertedAmount = formatValueWithContractPrecision(\r\n    convertToken(source, target, formatValueToContract(amount, source)),\r\n    target\r\n  );\r\n  return convertedAmount === \"NaN\" ? '' : convertedAmount.toString();\r\n};\r\n\r\nconst amountIsTooSmall = target => {\r\n  const minorValue = BigNumber('0.0000000000000000001');\r\n  return minorValue.gt(toBigNumber(target));\r\n};\r\n\r\nconst calcCommissionValue = (rbtcBalance, commissionRate) =>\r\n  rbtcBalance * (commissionRate / precision(RBTCPrecision));\r\n\r\nconst getUsableReserveBalance = (\r\n  currencyToMint,\r\n  userState,\r\n  mocState,\r\n  convertToken\r\n) => {\r\n  const {\r\n    rbtcBalance = 0,\r\n    spendableBalance = 0,\r\n    potentialBprox2MaxInterest = 0,\r\n  } = userState || {};\r\n  const commission = getCommissionRateForMintingTotalAvailable(currencyToMint, mocState, userState, convertToken);\r\n  const gasEstimation = gasMintingEstimation(\r\n    currencyToMint,\r\n    userState\r\n  );\r\n\r\n  const reserveCommisionValue = calcCommissionValue(rbtcBalance, commission.commissionRate);\r\n  const spendableBalanceBn = toBigNumber(rbtcBalance);\r\n  const mintingGasEstimation = gasEstimation !== undefined ? gasEstimation : 0;\r\n  let available = spendableBalanceBn.minus(reserveCommisionValue).minus(mintingGasEstimation);\r\n  if (currencyToMint === 'RISKPROX') {\r\n   available\r\n      .minus(potentialBprox2MaxInterest);\r\n  }\r\n  return BigNumber.maximum(0, available);\r\n};\r\n\r\nconst gasMintingEstimation = (\r\n  currencyToMint,\r\n  userState\r\n) => {\r\n  const {\r\n    estimateGasMintDoc = 0,\r\n    estimateGasMintBpro = 0,\r\n    estimateGasMintBprox2 = 0\r\n  } = userState || {};\r\n\r\n  switch (currencyToMint) {\r\n    case 'STABLE':\r\n      return estimateGasMintDoc;\r\n    case 'RISKPRO':\r\n      return estimateGasMintBpro;\r\n    case 'RISKPROX':\r\n      return estimateGasMintBprox2;\r\n    default:\r\n      return undefined;\r\n  }\r\n};\r\n\r\nconst getCommissionRateForMintingTotalAvailable = (tokenToMint, mocState, userState, convertToken) => {\r\n  const {spendableBalance = '0', rbtcBalance = '0'} = userState || {};\r\n  return getCommissionRateAndCurrency({\r\n    currencyYouExchange: \"RESERVE\",\r\n    currencyYouReceive: tokenToMint,\r\n    valueYouExchange: rbtcBalance,\r\n    mocState,\r\n    userState,\r\n    convertToken\r\n  });\r\n}\r\n\r\nconst canPayCommissionInMoc = (commissionValue, userState) => {\r\n  return (enoughMOCBalance(commissionValue, userState) && enoughMOCAllowance(commissionValue, userState));\r\n}\r\n\r\nconst enoughMOCAllowance = (commissionValue, userState) => {\r\n  const { mocAllowance = '0' } = userState || {};\r\n  return BigNumber(mocAllowance).gt(0) && BigNumber(mocAllowance).gte(commissionValue);\r\n}\r\n\r\nconst enoughMOCBalance = (commissionValue, userState) => {\r\n  const { mocBalance } = userState || {};\r\n  return BigNumber(mocBalance).gte(commissionValue);\r\n}\r\nconst getCommissionRateAndCurrency = ({currencyYouExchange, currencyYouReceive, valueYouExchange, mocState, userState, convertToken}) => {\r\n  const {\r\n    commissionRates = {}\r\n  } = mocState || {};\r\n  if(!convertToken) return {};\r\n  \r\n  // const vendor = { address: \"0xf69287F5Ca3cC3C6d3981f2412109110cB8af076\", markup: \"500000000000000\" };\r\n  const vendor = config.vendor;\r\n\r\n  const valueYouExchangeInRESERVE = convertToken(currencyYouExchange, \"RESERVE\", valueYouExchange);\r\n  const valueYouExchangeInMOC = convertToken(\"RESERVE\", \"MOC\", valueYouExchangeInRESERVE);\r\n  const commissionRateForMOC = BigNumber(\r\n    commissionRates[getTransactionType(currencyYouExchange, currencyYouReceive, \"MOC_COMMISSION\")])\r\n    .plus(vendor.markup);\r\n  const commissionRateForRESERVE = BigNumber(\r\n    commissionRates[getTransactionType(currencyYouExchange, currencyYouReceive, \"RESERVE_COMMISSION\")])\r\n    .plus(vendor.markup);\r\n\r\n  const commissionValueIfPaidInMOC = commissionRateForMOC.times(valueYouExchangeInMOC).div(precision(RBTCPrecision));\r\n  const canPayInMOC = (canPayCommissionInMoc(commissionValueIfPaidInMOC, userState));\r\n\r\n  const commissionValueIfPaidInRESERVE = commissionRateForRESERVE.times(valueYouExchangeInRESERVE).div(precision(RBTCPrecision));\r\n  const commissionYouPay = canPayInMOC ? commissionValueIfPaidInMOC : commissionValueIfPaidInRESERVE;\r\n\r\n  return {\r\n      commissionCurrency: canPayInMOC ? \"MOC\" : \"RESERVE\",\r\n      commissionRate: canPayInMOC ? commissionRateForMOC : commissionRateForRESERVE,\r\n      commissionYouPay: commissionYouPay,\r\n      enoughMOCBalance: enoughMOCBalance(commissionValueIfPaidInMOC, userState)\r\n  }\r\n}\r\n\r\nconst getMaxMintableBalance = (currencyToMint, userState, mocState, convertToken) => {\r\n  const usableReserveBalance = getUsableReserveBalance(\r\n    currencyToMint,\r\n    userState,\r\n    mocState,\r\n    convertToken\r\n  );\r\n  const {\r\n    docAvailableToMint,\r\n    bprox2AvailableToMint,\r\n  } = mocState;\r\n  const usableReserveBalanceInCurrencyToMint = convertToken(\"RESERVE\", currencyToMint, usableReserveBalance);\r\n  let response;\r\n  switch (currencyToMint) {\r\n    case 'STABLE':\r\n      response = {\r\n        value: minimum(docAvailableToMint,\r\n                      usableReserveBalanceInCurrencyToMint),\r\n        currency: \"STABLE\"\r\n      };\r\n      break;\r\n    case 'RISKPRO':\r\n      response = {\r\n        value: usableReserveBalanceInCurrencyToMint,\r\n        currency: \"RISKPRO\"\r\n      };\r\n      break;\r\n    case 'RISKPROX':\r\n      response = {\r\n        value: minimum(bprox2AvailableToMint,\r\n                      usableReserveBalanceInCurrencyToMint),\r\n        currency: \"RISKPROX\"\r\n      };\r\n      break;\r\n    default:\r\n      response = undefined;\r\n      break;\r\n  }\r\n  return response;\r\n}\r\n\r\nconst getMaxRedeemableBalance = (currencyToRedeem, userState, mocState) => {\r\n  const {\r\n    bproBalance = 0,\r\n    bprox2Balance = 0,\r\n    docBalance = 0,\r\n  } = userState || {};\r\n  const {\r\n    docAvailableToRedeem,\r\n    bproAvailableToRedeem\r\n  } = mocState;\r\n  let response;\r\n  switch (currencyToRedeem) {\r\n    case 'STABLE':\r\n      response = {\r\n        value: minimum(docAvailableToRedeem, docBalance),\r\n        currency: \"STABLE\"\r\n      };\r\n      break;\r\n    case 'RISKPRO':\r\n      response = {\r\n        value: minimum(bproAvailableToRedeem, bproBalance),\r\n        currency: \"RISKPRO\"\r\n      }\r\n      break;\r\n    case 'RISKPROX':\r\n      response = {\r\n        value: bprox2Balance,\r\n        currency: \"RISKPROX\"\r\n      };\r\n      break;\r\n    default:\r\n      response = undefined;\r\n      break;\r\n  }\r\n  return response;\r\n}\r\n\r\nconst isAmountBiggerThanMax = (amount, currency, maxAvailable) => {\r\n  const bdInputAmount = toBigNumber(formatValueToContract(amount, currency));\r\n  return !bdInputAmount.isNaN() && bdInputAmount.isGreaterThan(maxAvailable);\r\n};\r\nconst isAmountZero = amount => amount.eq(BigNumber('0'));\r\n\r\nexport {\r\n  convertAmount,\r\n  isAmountBiggerThanMax,\r\n  isAmountZero,\r\n  getMaxMintableBalance,\r\n  getMaxRedeemableBalance,\r\n  amountIsTooSmall,\r\n  getUsableReserveBalance,\r\n  canPayCommissionInMoc,\r\n  getCommissionRateAndCurrency,\r\n};\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}